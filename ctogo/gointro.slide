Golang Introduction 
A tutorial from C/C++ to Golang

LinkerNetworks 2017
15:00 9 Feb 2017
Tags: golang, present, golangtw

Evan Lin
Cloud Architect, LinkerNetworks
evanslin@gmail.com
http://www.evanlin.com/
@Evan_Lin

* About Me

- Cloud Architect @ Linker Networks
- [[http://golang.tw][Golang.TW]] Co-Orgnizer
- Top 5 Taiwan Golang open source contributor ([[http://github-awards.com/][Github Award]] )
- Developer, Curator, Blogger
- Curator of Codetengu


* How to be a great programmer

* Programming Go!

.image great-go.png
 
* How I met Golang 

Before learn Go, I am ..

- Multi-media industry over 10 years ( include 5 years project management)
- Working in hardware company advanced technology center

.image https://blog.golang.org/gopher/usergroups.png

* One day

Friend: "Hi Evan, I just learn a new programming language!!"

Me: "What? What language?"

Friend: "Go!"

* What is Go? 

.image https://imgflip.com/s/meme/Scared-Cat.jpg


* After I google it!

.image http://www.tv-asahi.co.jp/ch/contents/anime/0183/img/0_4.png

* So, I google it Again.

Go is an answer to problems of scale at Google.
.image https://talks.golang.org/2012/splash/datacenter.jpg 

* Problems of Scale: System Scale

- designed to scale to 10⁶⁺ machines
- everyday jobs run on 1000s of machines
- jobs coordinate, interact with others in the system
- lots going on at once

Solution: great support for concurrency

* Problems of Scale: Engineering Scale

- 5000+ developers across 40+ offices
- 20+ changes per minute
- 50% of code base changes every month
- single code tree 

Solution: design a language for large code bases

* What is Golang?

Create by Google (That's why I here :p)

Design by

- Ken Thompson
- Rob Pike
- Robert Griesemer

Feature:

- Compiled
- Statically Typed
- Garbage Collection

* I know Golang comes from Google, why we need another new language?

Fast!

Make Programming *FUN* again!

- simple and easy to learn 
- gofmt
- well-define packages
- great tools
- great apps

* Compiling Go is Fast!

.image compile-fast.png

* Running Go is Fast! 

.image go-fast.png


* Simple and easy to learn (Hello Google!)

.play -edit hello.go


* Simple and easy to learn (Basic Structure!)

.play -edit hello2.go


* Make programming fun again - gofmt

[[https://play.golang.org/p/EqGFeNyrHJ][Code is here]]

.image gofmt.png

* Engineering Joke

.image gofmt2.png

When you write Golang, you don't need to go to park!

* In case you are wondering 

.image tab.jpg

* Make programming fun again - Great built-in package

Golang have well-define package, such as :

- Powerful *concurrency* feature by built-in package with goroutine and channel.
- *net/http*: Rich tools for http, include web server and https (http/2)
- *encoding/json*: Useful tool for json encode and decode.

* Sample code on goroutine and channel
.play concurrent.go

* Use goroutines to manage state

Use a chan or a struct with a chan to communicate with a goroutine

.code server.go /START/,/STOP/


* Sample code for net/http

*note*: this code might not run correctly in appspot because it need open port on local machine.

.play web.go

if you use https and golang version is bigger than 1.6, you get free *HTTP/2*!

* Sample code for encoding/json
.play -edit json.go

* Great Tools

- go test
- godoc
- present 
- go mobile
- ide (vim-go, vs-code)

* Do you write your Test?

.image test-fun.jpg

* Go Test!

Go has a built-in testing framework.

It is provided by the testing package and the go test command.

- test
- coverage 
- benchmark

* Go test sample

Here is a complete test file that tests the strings.Index function:

.code test1.go

* Go test our code

Let's test our code.

  $ go test
  PASS

  $ go test -v
  === RUN TestIndex
  --- PASS: TestIndex (0.00 seconds)
  PASS

The go tool can report test coverage statistics.

  $ go test -cover
  PASS
  coverage: 96.4% of statements
  ok      strings    0.692s

* Benchmark 

Go tool can run benchmark of your code.

  func BenchmarkHello(b *testing.B) {
      for i := 0; i < b.N; i++ {
          fmt.Sprintf("hello")
      }
  }

Result as follow:

  BenchmarkHello    10000000    282 ns/op

* Do you write document after you complete your code?

.image fun-doc.jpg

* Godoc

Need good documentation? Just use Godoc !

- Generate document from your code.
- Everyone can see on https://godoc.or://godoc.org 

[[https://godoc.org/github.com/kkdai/mstranslator][Example]]

* Present (1)

Great presentation tool for Golang, include follow feature:

- Simple and Easy

  $ cat sample.slide

  Title of document
  Subtitle of document
  15:04 2 Jan 2006
  Tags: foo, bar, baz

  Author Name
  Job title, Company
  joe@example.com
  http://url/
  @twitter_name
  Some Text

  * Title of slide or section (must have asterisk)

  Some Text

* Present (2)

- Integrate with Golang (play code in your slide)

.play hello.go

* gomobile

Gomobile is a tool to help you build golang package for iOS/Android.

When you use gomobile, you can build.

- Native iOS/Android App with Golang
- iOS/Android Golang package which you can reduce you devlopment cost. (One golang package for server/iOS/Android)

.image https://raw.githubusercontent.com/golang/mobile/master/doc/caution.png

* gomobile example

.image gomobile1.png

* gomobile example (cont)

.image gomobile2.png

* Good CLI tool

.image https://cloud.githubusercontent.com/assets/173412/10911369/84832a8e-8212-11e5-9f82-cc96660a4794.gif 600 800

* IDE

There are lots IDE for developing Golang, I just recomment my favor two:

- vim-go
- vscode 

* Great Apps

- Docker
- Kubernetes
- etcd
- Prometheus
- *Your_App*


* Join Golang Taipei Meetup

[[http://golang.tw][Golang.tw]]

Join our Facebook Group: [[https://www.facebook.com/groups/269001993248363/743848382430386][Link]]

.image gofb.png

Follow our twitter: [[https://twitter.com/golangtw][golangtw]]

* Golang roadmap

Golang already have 7 years

Currently version: 1.7.3

Go 1.8: 2017/01/31

- Fast compilation
- Code generation improvements (SSA) 
- Defer and cgo improvements (defer 30%, cgo 45%)
- Go 1.7 support 64 bits mips, Go 1.8 will support 32 bits mips.

(Refer Dave Channey: [[https://dave.cheney.net/2016/11/19/go-1-8-toolchain-improvements][Go 1.8 toolchain improvements]] )


Go 1.9: 2017/07/31

See more detail milestone [[https://github.com/golang/go/milestones][here]]


* Golang Taipei : Call For Speaker

.image cfp.jpg

* Let's GO!

.image letsgo.jpg

*  Don't be afraid, if you come from Python

- [[https://blog.disqus.com/trying-out-this-go-thing][Disqus: Trying out this Go thing]]
- [[https://blog.rackspace.com/making-openstack-powered-rackspace-cloud-files-buzz-with-hummingbird/][Rackspace: Making OpenStack-Powered Rackspace Cloud Files Buzz With Hummingbird]]
- [[https://blog.repustate.com/migrating-entire-api-go-python/][Repustate: From Python to Go: migrating our entire API]]
- [[https://www.spacemonkey.com/blog/posts/go-space-monkey][Spacemonkey: Python to Go]]
- [[http://jordanorelli.com/post/31533769172/why-i-went-from-python-to-go-and-not-nodejs][Why I went from Python to Go (and not node.js)]]
- [[https://sendgrid.com/blog/convince-company-go-golang/][How to Convince Your Company to Go With Golang]]

* Don't be afraid, if you come from C++

- [[https://talks.golang.org/2013/oscon-dl.slide#1][dl.google.com]] by Brad Fitzpatrick
- [[http://matt-welsh.blogspot.tw/2013/08/rewriting-large-production-system-in-go.html][Flywheel: Google's mobile image compression proxy]]
- [[https://togototo.wordpress.com/2015/03/07/fulfilling-a-pikedream-the-ups-of-downs-of-porting-50k-lines-of-c-to-go/][Fulfilling a Pikedream: the ups of downs of porting 50k lines of C++ to Go]]

* Q&A



* Discussion

How Golang could help on your project? 

- Concurrency
- GC
- Power toolkit
- Performance
- Others  


