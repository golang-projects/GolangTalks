In Love with Golang
How Golang change my life
15:04 3 Dec 2016
Tags: golang, present, gdgfest

Evan Lin
Cloud Architect, LinkerNetworks
evanslin@gmail.com
http://www.evanlin.com/
@Evan_Lin
slide is [[https://github.com/kkdai/golangtalks][https://github.com/kkdai/golangtalks]]

* About Me

- Cloud Architect @ Linker Networks
- [[http://golang.tw][Golang.TW]] Co-Orgnizer
- Top 10 Taiwan Golang open source contributor ([[http://github-awards.com/][Github Award]] )
- Developer, Curator, Blogger


* Programming Go

.image go-dock.png

* How to be a great programmer

.image great-go.png

* Whis is Golang?

Create by Google (That's why I here :p)

Design by

- Ken Thompson
- Rob Pike
- Robert Griesemer

Feature:

- Compiled
- Statically Typed
- Garbage Collection

* Why?

Fast!

Make Programming *FUN* again!

- gofmt
- well-define packages
- great tools
- great apps

* Go is Fast 

.image go-fast.png

* Make programming fun again - gofmt

[[https://play.golang.org/p/EqGFeNyrHJ][Code is here]]

.image gofmt.png

* Make programming fun again - Great built-in package

Golang have well-define package, such as :

- Powerful *concurrency* feature by built-in package with goroutine and channel.
- *net/http*: Rich tools for http, include web server and https (http/2)
- *encoding/json*: Useful tool for json encode and decode.

* Sample code on goroutine and channel
.play concurrent.go

* Sample code for net/http

*note*: this code might not run correctly in appspot because it need open port on local machine.

.play web.go

if you use https and golang version is bigger than 1.6, you get free *HTTP/2*!

* Sample code for encoding/json
.play -edit json.go

* Great Tools

Go has a built-in testing framework.

It is provided by the testing package and the go test command.

- test
- coverage 
- benchmark

* Go test sample

Here is a complete test file that tests the strings.Index function:

.code test1.go

* Go test our code

Let's test our code.

  $ go test
  PASS

  $ go test -v
  === RUN TestIndex
  --- PASS: TestIndex (0.00 seconds)
  PASS

The go tool can report test coverage statistics.

  $ go test -cover
  PASS
  coverage: 96.4% of statements
  ok      strings    0.692s

* Benchmark 

Go tool can run benchmark of your code.

  func BenchmarkHello(b *testing.B) {
      for i := 0; i < b.N; i++ {
          fmt.Sprintf("hello")
      }
  }

Result as follow:

  BenchmarkHello    10000000    282 ns/op

* Great Apps


